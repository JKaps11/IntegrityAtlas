// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//======================[Module Models]======================
enum ModuleNames { 
  VALUES 
  AIMS 
  FOCUS 
  ADVENTURE 
  VALUE_GENERATOR 
  TASKS 
  CALENDAR
  }

enum ModuleStatus { 
  NOT_STARTED
  IN_PROGRESS 
  COMPLETED 
}

model UserModuleInfo {
  id          Int            @id @default(autoincrement())
  userId      String
  moduleId    Int

  status      ModuleStatus   @default(NOT_STARTED)
  startedAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  completedAt DateTime?
  //TODO make this a foriegn key
  currentStep Int?  

  user        User           @relation(fields: [userId], references: [id])
  module      ModuleContent  @relation(fields: [moduleId], references: [id])

  @@unique([userId, moduleId]) // Ensure 1 progress per module per user
}


// These are separated as they are the actual static content
model ModuleContent {
  id          Int          @id @default(autoincrement())
  name        ModuleNames  @unique
  description String

  steps       ModelStep[]
  userProgress UserModuleInfo[]
}

model ModelStep {
  id          Int          @id @default(autoincrement())
  title       String
  content     Json

  moduleId    Int
  module      ModuleContent @relation(fields: [moduleId], references: [id])
}

//======================[Task Model]======================
enum TaskStatus { 
  DONE 
  IN_PROGRESS 
  COMPLETED 
  NOTSCHEDULED 
  OVERDUE
}

model Task {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  status      TaskStatus      @default(IN_PROGRESS)
  startDate   DateTime    @default(now())
  dueDate     DateTime
}

//======================[Auth Models]======================
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  userModuleProgress  UserModuleInfo[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}