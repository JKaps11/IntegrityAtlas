// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//======================[Module Models]======================
enum ModuleNames { 
  VALUES 
  AIMS 
  FOCUS 
  ADVENTURE 
  VALUE_GENERATOR 
  TASKS 
  CALENDAR
  }

enum ModuleStatus { 
  DONE 
  IN_PROGRESS 
  COMPLETED 
}

model ModuleMetadata {
  id          Int          @id @default(autoincrement())
  name        ModuleNames
  description String
  status      ModuleStatus @default(IN_PROGRESS)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  steps       ModelStep[]
  users       User[]
}

model ModelStep {
  id          Int          @id @default(autoincrement())
  title       String
  content     Json

  moduleId  Int
  module    ModuleMetadata  @relation(fields: [moduleId], references: [id])
}

//======================[Task Model]======================
enum TaskStatus { 
  DONE 
  IN_PROGRESS 
  COMPLETED 
  NOTSCHEDULED 
  OVERDUE
}

model Task {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  status      TaskStatus      @default(IN_PROGRESS)
  startDate   DateTime    @default(now())
  dueDate     DateTime
}

//======================[Auth Models]======================
model User {
  id             String    @id @default(cuid())
  username       String
  email          String?   @unique
  emailVerified  DateTime?
  image          String?

  moduleId       Int
  module         ModuleMetadata @relation(fields: [moduleId], references: [id])

  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @map("refresh_token")
  access_token       String? @map("access_token")
  expires_at         Int?    @map("expires_at")
  token_type         String? @map("token_type")
  scope              String?
  id_token           String? @map("id_token")
  session_state      String? @map("session_state")

  user               User    @relation(fields: [userId], references: [id])

  @@map("accounts")
  @@unique([provider, providerAccountId])
}

model Session {
  id            Int      @id @default(autoincrement())
  sessionToken  String   @unique
  userId        String
  expires       DateTime

  user          User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationToken {
  identifier  String
  token       String   @unique
  expires     DateTime

  @@map("verification_tokens")
  @@unique([identifier, token])
}